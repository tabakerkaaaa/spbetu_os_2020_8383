CODE      	SEGMENT      

STACKFORINT	DW 100H DUP (?)     

		ASSUME CS:CODE, DS:DATA, SS:STACKK 

PUTSYMB 	PROC 
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
	
		MOV 	AH, 09H
		MOV 	BH, 0H
		MOV 	CX, 1H
		INT 	10H

		POP 	CX
		POP 	BX
		POP 	AX
		RET

PUTSYMB 	ENDP

PUTSYMB2 	PROC 
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
	
		MOV 	AH, 09H
		MOV 	BH, 0H
		MOV 	CX, 2H
		INT 	10H

		POP 	CX
		POP 	BX
		POP 	AX
		RET

PUTSYMB2 	ENDP
 
GETPOS  	PROC
		PUSH 	AX
		PUSH 	BX

		MOV 	AH, 03H
		MOV 	BH, 0H
		INT 	10H

		POP 	BX
		POP 	AX
		RET

GETPOS  	ENDP

SETPOS  	PROC
		PUSH 	AX
		PUSH 	BX

		MOV 	AH, 02H
		MOV 	BH, 0H
		INT 	10H
		
		POP		BX
		POP 	AX
		RET

SETPOS  	ENDP

BEGININT:
ADDRESS 	DD 	?
SIGNATURA 	DW 	0FEFEH
FORREMOVE	DW	?

INTCOUNT 	PROC	FAR            

		JMP 	BODY
		FORAX	DW ?
		FORSS	DW ?
		FORSP 	DW ?
		
		BODY:
		MOV		FORAX, AX
		MOV		FORSS, SS
		MOV		FORSP, SP
		MOV 	AX, CS
		MOV 	SS, AX 
		MOV 	SP, OFFSET STACKFORINT + 200H
		MOV 	AX, FORAX
		PUSH 	AX
		PUSH 	BX
		PUSH 	CX
		PUSH 	DX
		PUSH 	ES
		
		CALL	GETPOS
		MOV		CX, DX
		PUSH	AX
		PUSH	CX
		
		MOV 	AL, NUMBER
		MOV		BL, 0AH
		MOV		DH, 18H
		MOV		DL, 4FH
		
		CYCLE:
		MOV		AH, 0H
		DIV		BL
		CALL	SETPOS
		MOV		CL, AL
		MOV		AL, AH
		ADD		AL, 30H
		CALL	PUTSYMB
		DEC		DL
		MOV		AL, CL
		CMP		AL, 0H
		JNE		CYCLE	
		INC		NUMBER	

		CMP		NUMBER, 79H
		JNE		GOGO
		MOV		NUMBER, 0H
		MOV		AL, 20H
		CALL	PUTSYMB2

		GOGO:
		POP		CX
		POP		AX
		MOV 	DX, CX
		CALL 	SETPOS

		MOV 	AL, 20H
		OUT 	20H, AL
		POP		ES
		POP 	DX
		POP 	CX
		POP 	BX
		POP 	AX
		MOV 	AX, FORSS
		MOV 	SS, AX
		MOV 	AX, FORAX
 		MOV 	SP, FORSP
		IRET     

INTCOUNT 	ENDP
ENDINT:

WRITE  	PROC	NEAR

       	PUSH	AX
       	MOV		AH, 09H
        INT		21H
		POP 	AX 
        RET

WRITE  	ENDP

Main		PROC	FAR           

		MOV 	AX, DATA		  
		MOV 	DS, AX
		MOV 	AX, ES
		MOV 	FORREMOVE, AX											
		MOV 	AL, 1CH
		MOV 	AH, 35H
		INT		21H
		MOV		DX, ES:[BX-4H]
		CMP 	DX, SIGNATURA
		JE 		ISREMOVE 

		MOV 	AL, 1CH
		MOV 	AH, 35H
		INT		21H
		MOV 	WORD PTR ADDRESS, BX
		MOV 	WORD PTR ADDRESS + 2H, ES
		PUSH 	DS
		MOV 	DX, OFFSET INTCOUNT
		MOV 	AX, SEG INTCOUNT
		MOV 	DS, AX
		MOV 	AL, 1CH
		MOV 	AH, 25H
		INT 	21H
		POP		DS
	
		MOV 	DX, OFFSET STR1
		CALL 	WRITE

		MOV		DX, OFFSET ENDINT
		ADD 	DX, 10FH
       	MOV 	CL, 4H
		SHR 	DX, CL
		INC		DX
		MOV 	AH, 31H
		INT 	21H 
		JMP		ENDPROG

		ISREMOVE:
		MOV		AX, FORREMOVE 
		MOV		ES, AX
		CMP		BYTE PTR ES:[82H], '/'
		JNE		SKIP 
		CMP		BYTE PTR ES:[83H], 'u'
		JNE		SKIP 
		CMP		BYTE PTR ES:[84H], 'n'
		JNE		SKIP 
		JMP 	REMOVEINTCOUNT
		
		SKIP:
		MOV 	DX, OFFSET STR2
		CALL 	WRITE
		JMP 	ENDPROG 

		REMOVEINTCOUNT:

		MOV 	DX, OFFSET STR3
		CALL 	WRITE

		MOV 	AL, 1CH
		MOV 	AH, 35H
		INT  	21H
		MOV 	DX, WORD PTR ES:ADDRESS
		MOV 	AX, WORD PTR ES:ADDRESS + 2H
		MOV 	WORD PTR ADDRESS, DX
		MOV 	WORD PTR ADDRESS + 2H, AX
		CLI
		PUSH 	DX
		MOV 	DX, WORD PTR ADDRESS 
		MOV 	AX, WORD PTR ADDRESS + 2H
		MOV  	DS, AX
		MOV  	AH, 25H
		MOV  	AL, 1CH
		INT  	21H
		POP	DS
		STI

		MOV 	ES, ES:FORREMOVE
		MOV 	AH, 49H
		INT 	21H
		MOV 	ES, ES:[2CH]	
		MOV 	AH, 49H
		INT 	21H
	
		ENDPROG:
		MOV 	AH, 4CH
		INT 	21H

Main		ENDP	
CODE      	ENDS 

DATA		SEGMENT

STR1 		DB "Resident loaded into memory!", 0DH, 0AH, "$"
STR2 		DB "Resident in memory!", 0DH, 0AH, "$"
STR3 		DB "Resident removed from memory!", 0DH, 0AH, "$"
NUMBER 	DB 0

DATA      	ENDS 

STACKK	SEGMENT	STACK           

DW 100H DUP(?)

STACKK    	ENDS  

END	Main

